// Copy this file to bn-elicitator.config.groovy, and change the appropriate properties.
// Look at the comments above each property to see what you should change.
// DO NOT check this file into version control for a public project, as it will contain
// secrets that you do not want to share.
// 
// Your copy of this file must live in one of the following locations:
// 
//   $HOME/.grails/bn-elicitator-config.groovy
// 
//   /etc/bn-elicitator/config.groovy (sorry Windows users, will have to think of a better place on request).
// 
//   bn-elicitator.config.location Java system property (e.g. `grails -Dbn-elicitator.config.location=/tmp/config.groovy run-app`)
//

environments {
	development {
		// Most likely "http://localhost:8080/bn-elicitator" during development
		grails.serverURL = "http://host.name/path/to/deployment"
	}
	production {
		grails.serverURL = "http://host.name/path/to/deployment"
	}
}

bn {
	// This should be a .groovy file containing a class which extends "bn.elicitator.init.DataLoader". Feel free to
	// place the file wherever you want. A good starting point is to copy the 
	// "grails-app/utils/bn/elicitator/init/loaders/ExampleDataLoader.groovy" file and modify it to your needs.
	// It will specify which variables to use in your project, what states they can take, what variable class they 
	// belong to, and provides descriptions of each.
	// It will also be responsible for configuring what your home page looks like, and how your consent form is presented.
	dataLoaderClass = "/etc/bn-elicitator/data-loader.groovy"
}

// Uncomment this and configure if you want to be able to have the system send emails to users,
// or send emails to you (e.g. if there are errors).
// 
// NOTE: If you leave emails disabled, then people will not be asked to confirm their email addresses
//   when registering. Rather, it will trust that any email used to register is valid. If email sending
//   is configured, then people will be sent a confirmation email with a "complete registration" link.
/*
grails {
	plugins.springsecurity.ui.register.emailFrom = "your.email@example.com"
	mail {
		host     = "smtp.example.com"
		port     = 465
		username = "username"
		password = "password"
		props    = [
			"mail.smtp.auth" : "true",
			"mail.smtp.socketFactory.port" : "465",
			"mail.smtp.socketFactory.class" : "javax.net.ssl.SSLSocketFactory",
			"mail.smtp.socketFactory.fallback" : "false"
		]
	}
}
*/

//
// This needs to be changed to point to the database you wish to use for this project.
// You will need to create the database and grant the relvant permissions (username + password) before running bn-elicitator.
// Leave the database empty, and this software will create the tables it requires the first time it is run.
//
// See http://grails.github.io/grails-doc/latest/guide/conf.html#dataSource for details of how to configure this block.
// 
dataSource {

	// Change these so that the URL points to your database (e.g. http://www.petefreitag.com/articles/jdbc_urls/)
	url             = "jdbc:mysql://host/database"

	// Configure these to be the username and password you wish to use when connecting to the database.
	username        = "replace with your database username"
	password        = "replace with your database password"

	// Your will likely want to leave this as "update", but during testing, it may be helpful to use
	// "create" or "create-drop" so that the database is wiped each time the application starts. DON'T use
	// "create" or "create-drop" in production, for the obvious reason that you will continually drop your
	// production database tables :(
	dbCreate        = "update"

	// If you are using a MySQL or MariaDB database, these will not need to change.
	// This software has not been tested with other databases, so I'm not familiar with how to specify
	// the driver class for other databases. The reason is that the binary bn-elicitator.war file will
	// have this driver compiled into it, but probably not other drivers. Please log an issue at
	// https://github.com/pserwylo/bn-elicitator if you are unable to get another database working.
	driverClassName = "com.mysql.jdbc.Driver"
	dialect         = "org.hibernate.dialect.MySQL5InnoDBDialect"

	// You probably DON'T want to change this section.
	// It is here to prevent "java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost." errors.
	// http://grails4you.com/2012/04/grails-and-java-io-eofexception-can-not-read-response-from-server/
	properties {
		maxActive = -1
		maxIdle = 8
		minIdle = 0
		maxWait = 180000
		minEvictableIdleTimeMillis = 1000 * 60 * 15
		timeBetweenEvictionRunsMillis = 1000 * 60 * 15
		numTestsPerEvictionRun = 3
		testOnBorrow = true
		testWhileIdle = true
		testOnReturn = false
		validationQuery = "select 1"
	}

}

// Ideally, this should mostly be moved to the regular config, so that the successUri, failureUri, callback,
// and api are all constant - and only the key and secret are in this config file.
// However, the callback depends on the serverURL variable which is defined above, and not available in the
// regular config file. As such, you should add your key and your secret to the CustomConfig.groovy,
// but don't modify the other options.
/*
oauth {
	providers {
		facebook {
			api        = FacebookApi
			key        = ''
			secret     = ''
			successUri = '/auth/oauth/onSuccess?provider=facebook'
			failureUri = '/auth/oauth/onFailure?provider=facebook'
			callback   = "${grails.serverURL}/oauth/facebook/callback"
		}
	}
}
*/
